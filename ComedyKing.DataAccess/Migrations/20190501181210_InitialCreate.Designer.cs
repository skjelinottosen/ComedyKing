// <auto-generated />
using System;
using ComedyKing.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComedyKing.DataAccess.Migrations
{
    [DbContext(typeof(CelebrityInCelebrityJokeContext))]
    [Migration("20190501181210_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComedyKing.Model.CelebrityInCelebrityJoke", b =>
                {
                    b.Property<int>("CelebrityID");

                    b.Property<int>("CelebrityJokeID");

                    b.HasKey("CelebrityID", "CelebrityJokeID");

                    b.HasIndex("CelebrityJokeID");

                    b.ToTable("CelebrityInCelebrityJokes");
                });

            modelBuilder.Entity("ComedyKing.Model.Joke", b =>
                {
                    b.Property<int>("JokeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("Rate");

                    b.Property<string>("Text");

                    b.HasKey("JokeID");

                    b.ToTable("Jokes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Joke");
                });

            modelBuilder.Entity("ComedyKing.Model.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("ID");

                    b.ToTable("Pepole");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("ComedyKing.Model.CelebrityJoke", b =>
                {
                    b.HasBaseType("ComedyKing.Model.Joke");

                    b.Property<string>("CelebrityMentioned");

                    b.ToTable("CelebrityJoke");

                    b.HasDiscriminator().HasValue("CelebrityJoke");
                });

            modelBuilder.Entity("ComedyKing.Model.ClassicJoke", b =>
                {
                    b.HasBaseType("ComedyKing.Model.Joke");

                    b.Property<string>("StoryBehind");

                    b.ToTable("ClassicJoke");

                    b.HasDiscriminator().HasValue("ClassicJoke");
                });

            modelBuilder.Entity("ComedyKing.Model.ShortJoke", b =>
                {
                    b.HasBaseType("ComedyKing.Model.Joke");


                    b.ToTable("ShortJoke");

                    b.HasDiscriminator().HasValue("ShortJoke");
                });

            modelBuilder.Entity("ComedyKing.Model.Celebrity", b =>
                {
                    b.HasBaseType("ComedyKing.Model.Person");

                    b.Property<string>("NickName");

                    b.Property<string>("Profession");

                    b.ToTable("Celebrity");

                    b.HasDiscriminator().HasValue("Celebrity");
                });

            modelBuilder.Entity("ComedyKing.Model.User", b =>
                {
                    b.HasBaseType("ComedyKing.Model.Person");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("ComedyKing.Model.CelebrityInCelebrityJoke", b =>
                {
                    b.HasOne("ComedyKing.Model.Celebrity", "Celebrity")
                        .WithMany("CelebrityJoke")
                        .HasForeignKey("CelebrityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComedyKing.Model.CelebrityJoke", "CelebrityJoke")
                        .WithMany("Celebrity")
                        .HasForeignKey("CelebrityJokeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
